"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongoose-unique-validator";
exports.ids = ["vendor-chunks/mongoose-unique-validator"];
exports.modules = {

/***/ "(rsc)/./node_modules/mongoose-unique-validator/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/mongoose-unique-validator/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nconst each = __webpack_require__(/*! lodash.foreach */ \"(rsc)/./node_modules/lodash.foreach/index.js\");\r\nconst get = __webpack_require__(/*! lodash.get */ \"(rsc)/./node_modules/lodash.get/index.js\");\r\nconst merge = __webpack_require__(/*! lodash.merge */ \"(rsc)/./node_modules/lodash.merge/index.js\");\r\n\r\n// Function typecheck helper\r\nconst isFunc = (val) => typeof val === 'function';\r\n\r\nconst deepPath = function(schema, pathName) {\r\n    let path;\r\n    const paths = pathName.split('.');\r\n\r\n    if (paths.length > 1) {\r\n        pathName = paths.shift();\r\n    }\r\n\r\n    if (isFunc(schema.path)) {\r\n        path = schema.path(pathName);\r\n    }\r\n\r\n    if (path && path.schema) {\r\n        path = deepPath(path.schema, paths.join('.'));\r\n    }\r\n\r\n    return path;\r\n};\r\n\r\nconst plugin = function(schema, options) {\r\n    options = options || {};\r\n    const type = options.type || plugin.defaults.type || 'unique';\r\n    const message = options.message || plugin.defaults.message || 'Error, expected `{PATH}` to be unique. Value: `{VALUE}`';\r\n\r\n    // Mongoose Schema objects don't describe default _id indexes\r\n    // https://github.com/Automattic/mongoose/issues/5998\r\n    const indexes = [[{ _id: 1 }, { unique: true }]].concat(schema.indexes());\r\n\r\n    // Dynamically iterate all indexes\r\n    each(indexes, (index) => {\r\n        const indexOptions = index[1];\r\n\r\n        if (indexOptions.unique) {\r\n            const paths = Object.keys(index[0]);\r\n            each(paths, (pathName) => {\r\n                // Choose error message\r\n                const pathMessage = typeof indexOptions.unique === 'string' ? indexOptions.unique : message;\r\n\r\n                // Obtain the correct path object\r\n                const path = deepPath(schema, pathName) || schema.path(pathName);\r\n\r\n                if (path) {\r\n                    // Add an async validator\r\n                    path.validate(function() {\r\n                        return new Promise((resolve, reject) => {\r\n                            const isQuery = this.constructor.name === 'Query';\r\n                            const conditions = {};\r\n                            let model;\r\n\r\n                            if (isQuery) {\r\n                                // If the doc is a query, this is a findAndUpdate.\r\n                                each(paths, (name) => {\r\n                                    let pathValue = get(this, '_update.' + name) || get(this, '_update.$set.' + name);\r\n\r\n                                    // Wrap with case-insensitivity\r\n                                    if (get(path, 'options.uniqueCaseInsensitive') || indexOptions.uniqueCaseInsensitive) {\r\n                                        // Escape RegExp chars\r\n                                        pathValue = pathValue.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n                                        pathValue = new RegExp('^' + pathValue + '$', 'i');\r\n                                    }\r\n\r\n                                    conditions[name] = pathValue;\r\n                                });\r\n\r\n                                // Use conditions the user has with find*AndUpdate\r\n                                each(this._conditions, (value, key) => {\r\n                                    conditions[key] = { $ne: value };\r\n                                });\r\n\r\n                                model = this.model;\r\n                            } else {\r\n                                const parentDoc = this.$parent();\r\n                                const isNew = parentDoc.isNew;\r\n\r\n                                if (!isNew && !parentDoc.isModified(pathName)) {\r\n                                    return resolve(true);\r\n                                }\r\n\r\n                                // https://mongoosejs.com/docs/subdocs.html#subdocuments-versus-nested-paths\r\n                                const isSubdocument = this._id !== parentDoc._id;\r\n                                const isNestedPath = isSubdocument ? false : pathName.split('.').length > 1;\r\n\r\n                                each(paths, (name) => {\r\n                                    let pathValue;\r\n                                    if (isSubdocument) {\r\n                                        pathValue = get(this, name.split('.').pop());\r\n                                    } else if (isNestedPath) {\r\n                                        const keys = name.split('.');\r\n                                        pathValue = get(this, keys[0]);\r\n                                        for (let i = 1; i < keys.length; i++) {\r\n                                            const key = keys[i];\r\n                                            pathValue = get(pathValue, key);\r\n                                        }\r\n                                    } else {\r\n                                        pathValue = get(this, name);\r\n                                    }\r\n\r\n                                    // Wrap with case-insensitivity\r\n                                    if (get(path, 'options.uniqueCaseInsensitive') || indexOptions.uniqueCaseInsensitive) {\r\n                                        // Escape RegExp chars\r\n                                        pathValue = pathValue.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n                                        pathValue = new RegExp('^' + pathValue + '$', 'i');\r\n                                    }\r\n\r\n                                    conditions[name] = pathValue;\r\n                                });\r\n\r\n                                if (!isNew && this._id) {\r\n                                    conditions._id = { $ne: this._id };\r\n                                }\r\n\r\n                                // Obtain the model depending on context\r\n                                // https://github.com/Automattic/mongoose/issues/3430\r\n                                // https://github.com/Automattic/mongoose/issues/3589\r\n                                if (isSubdocument) {\r\n                                    model = this.ownerDocument().model(this.ownerDocument().constructor.modelName);\r\n                                } else if (isFunc(this.model)) {\r\n                                    model = this.model(this.constructor.modelName);\r\n                                } else {\r\n                                    model = this.constructor.model(this.constructor.modelName);\r\n                                }\r\n                            }\r\n\r\n                            if (indexOptions.partialFilterExpression) {\r\n                                merge(conditions, indexOptions.partialFilterExpression);\r\n                            }\r\n\r\n                            // Is this model a discriminator and the unique index is on the whole collection,\r\n                            // not just the instances of the discriminator? If so, use the base model to query.\r\n                            // https://github.com/Automattic/mongoose/issues/4965\r\n                            // eslint-disable-next-line\r\n                            if (model.baseModelName && (indexOptions.partialFilterExpression === null || indexOptions.partialFilterExpression === undefined)) {\r\n                                model = model.db.model(model.baseModelName);\r\n                            }\r\n\r\n                            model.find(conditions).countDocuments()\r\n                                .then((count) => {\r\n                                    resolve(count === 0);\r\n                                })\r\n                                .catch((err) => {\r\n                                    reject(err);\r\n                                });\r\n                        });\r\n                    }, pathMessage, type);\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nplugin.defaults = {};\r\n\r\n// Export the mongoose plugin\r\nmodule.exports = plugin;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mongoose-unique-validator/index.js\n");

/***/ })

};
;